// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String       @id @default(uuid())
  email        String       @unique
  name         String
  password     String
  balance      Float        @default(0)
  houseId      Int          @default(1)
  role         Role         @default(MERCADER)
  house        House        @relation(fields: [houseId], references: [id])
  BidHistories BidHistory[]
  Auctions     Auction[]    @relation("AuctionOwner")
  AuctionsWon  Auction[]    @relation("AuctionWinner")
}

enum Role {
  MERCADER
  MAESTRE
}

model House {
  id            Int            @id @default(autoincrement())
  name          String
  imagePath     String
  description   String
  balance       Float          @default(0)
  cap           Float          @default(0)
  users         User[]
  productStores ProductStore[]
  auctions      Auction[]
}

model Product {
  name          String
  description   String
  imagePath     String
  id            Int            @id @default(autoincrement())
  auctions      Auction[]
  ProductStores ProductStore[]
}

model ProductStore {
  id        Int     @id @default(autoincrement())
  houseId   Int
  price     Float
  productId Int
  stock     Int
  house     House   @relation(fields: [houseId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@unique([houseId, productId])
}

model Auction {
  id           Int          @id @default(autoincrement())
  houseId      Int
  productId    Int
  basePrice    Float
  quantity     Int
  increment    Float
  price        Float // Current price
  initialPrice Float
  probability  Float
  winnerId     String?
  ownerId      String
  endDate      DateTime
  isActive     Boolean
  product      Product      @relation(fields: [productId], references: [id])
  house        House        @relation(fields: [houseId], references: [id])
  bidHistory   BidHistory[]
  winner       User?        @relation("AuctionWinner", fields: [winnerId], references: [id], onDelete: SetNull)
  owner        User         @relation("AuctionOwner", fields: [ownerId], references: [id], onDelete: Cascade)
}

model BidHistory {
  id        Int      @id @default(autoincrement())
  auctionId Int
  userId    String
  amount    Float
  date      DateTime
  isWinner  Boolean
  Auction   Auction  @relation(fields: [auctionId], references: [id])
  User      User     @relation(fields: [userId], references: [id], onDelete:Cascade) 
}
